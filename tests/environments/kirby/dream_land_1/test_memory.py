"""Tests kirby/dream_land_1/_memory.py."""

import unittest
import numpy as np
from pyboy import PyBoy

from gymboy.environments.kirby.dream_land_1._memory import (
    _boss_health,
    _game_area,
    _game_over,
    _kirby_health,
    _lives,
    _score,
)


class TestMemory(unittest.TestCase):
    """Tests the methods under kirby/dream_land_1/_memory.py."""

    def setUp(self):
        self.rom_path = "./gymboy/resources/roms/kirby/dream_land_1/kirby_dream_land_1.gb"
        self.init_state_path1 = "./gymboy/resources/states/kirby/dream_land_1/kirby_dream_land_1_test_1.state"
        self.init_state_path2 = "./gymboy/resources/states/kirby/dream_land_1/kirby_dream_land_1_test_2.state"
        self.init_state_path3 = "./gymboy/resources/states/kirby/dream_land_1/kirby_dream_land_1_test_3.state"

        self.pyboy1 = PyBoy(self.rom_path)
        with open(self.init_state_path1, "rb") as f:
            self.pyboy1.load_state(f)
        self.pyboy1.tick(1)

        self.pyboy2 = PyBoy(self.rom_path)
        with open(self.init_state_path2, "rb") as f:
            self.pyboy2.load_state(f)
        self.pyboy2.tick(1)

        self.pyboy3 = PyBoy(self.rom_path)
        with open(self.init_state_path3, "rb") as f:
            self.pyboy3.load_state(f)
        self.pyboy3.tick(1)

    def tearDown(self):
        self.pyboy1.stop()
        self.pyboy2.stop()
        self.pyboy3.stop()

    def test_score(self):
        """Tests the _score() method."""
        self.assertEqual(2800, _score(self.pyboy1))
        self.assertEqual(4400, _score(self.pyboy2))
        self.assertEqual(8600, _score(self.pyboy3))

    def test_kirby_health(self):
        """Tests the _kirby_health() method."""
        self.assertEqual(1, _kirby_health(self.pyboy1))
        self.assertEqual(6, _kirby_health(self.pyboy2))
        self.assertEqual(2, _kirby_health(self.pyboy3))

    def test_boss_health(self):
        """Tests the _boss_health() method."""
        self.assertEqual(0, _boss_health(self.pyboy1))
        self.assertEqual(3, _boss_health(self.pyboy2))
        self.assertEqual(0, _boss_health(self.pyboy3))

    def test_lives(self):
        """Tests the _lives() method."""
        self.assertEqual(5, _lives(self.pyboy1))
        self.assertEqual(5, _lives(self.pyboy2))
        self.assertEqual(4, _lives(self.pyboy3))

    def test_game_over(self):
        """Tests the _game_over() method."""
        self.assertFalse(_game_over(self.pyboy1))
        self.assertFalse(_game_over(self.pyboy2))
        self.assertFalse(_game_over(self.pyboy3))

    def test_game_area(self):
        """Tests the _game_area() method."""
        np.testing.assert_allclose(
            _game_area(self.pyboy1),
            np.array([
                [292, 383, 383, 383, 383, 301, 383, 383, 383, 297, 383, 383, 383, 293, 292, 383, 383, 383, 383, 290],
                [383, 298, 383, 383, 383, 383, 300, 294, 295, 296, 383, 383, 299, 383, 383, 298, 383, 383, 383, 383],
                [383, 297, 383, 383, 383, 290, 291, 383, 383, 383, 383, 301, 383, 383, 383, 297, 383, 290, 291, 383],
                [295, 296, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 300, 294, 295, 296, 383, 383, 383, 383],
                [383, 290, 291, 383, 383, 383, 383, 383, 383, 293, 292, 383, 383, 383, 383, 383, 383, 330, 331, 331],
                [383, 383, 383, 383, 383, 383, 383, 383, 299, 383, 383, 298, 383, 383, 383, 383, 383, 334, 328, 328],
                [383, 383, 383, 293, 292, 383, 383, 301, 383, 383, 383, 297, 383, 383, 383, 383, 383, 334, 328, 328],
                [383, 383, 299, 383, 383, 298, 383, 383, 300, 294, 295, 296, 383, 383, 383, 383, 299, 334, 328, 328],
                [383, 301, 383, 383, 383, 297, 383, 383, 383, 383, 383, 307, 308, 383, 383, 301, 383, 334, 328, 328],
                [274, 383, 300, 294, 295, 296, 383,  14,  32,  76,  92, 309, 310, 383, 383, 383, 300, 334, 328, 328],
                [332, 272, 274, 383, 383, 383, 383, 383, 383, 383, 383, 309, 310, 308, 383, 383, 383, 334, 328, 328],
                [333, 275, 276, 272, 274, 272, 274,  34,  48,  50, 383, 309, 310, 310, 383, 272, 274, 334, 328, 328],
                [328, 331, 331, 331, 331, 331, 332, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 328, 328, 328],
                [328, 277, 278, 328, 328, 328, 333, 328, 328, 328, 328, 277, 278, 277, 278, 277, 278, 277, 278, 277],
                [278, 279, 281, 277, 278, 328, 328, 331, 332, 277, 278, 279, 281, 279, 281, 279, 281, 279, 281, 279],
                [281, 280, 282, 279, 281, 277, 278, 328, 333, 279, 281, 280, 282, 280, 282, 280, 282, 280, 282, 280],
            ]),
        )
        np.testing.assert_allclose(
            _game_area(self.pyboy2),
            np.array([
                [301, 383, 383, 383, 297, 383, 383, 383, 383, 383, 301, 383, 383, 383, 297, 383, 383, 256, 382, 382],
                [383, 300, 294, 295, 296, 383, 383, 383, 383, 383, 383, 300, 294, 295, 296, 383, 256, 382, 279, 382],
                [383, 383, 383, 383, 383, 383, 290, 291, 383, 383, 293, 292, 383, 383, 383, 256, 382, 382, 279, 283],
                [298, 383, 383, 383, 383, 383, 383, 383, 383, 299, 383, 383, 298, 383, 383, 260, 382, 382, 283, 284],
                [297, 383, 383, 383, 293, 292, 383, 383, 301, 383, 383, 383, 297, 383, 383, 256, 382, 382, 382, 382],
                [296, 383, 383, 299, 383, 383, 298, 383, 383, 300, 294, 295, 296, 383, 383, 260, 382, 382, 382, 382],
                [383, 383, 301, 383, 383, 383, 297, 383, 383, 383, 383, 383, 293, 292, 383, 383, 260, 382, 382, 264],
                [383, 383, 383, 300, 294, 295, 296, 383, 383, 383, 383, 299, 383, 383, 298, 383, 383, 260, 264, 381],
                [383, 383, 293, 292, 383, 383, 383, 383, 383, 383, 301, 383, 383, 383, 297, 383, 383, 383, 267, 262],
                [383, 299, 383, 383, 298, 383, 383, 383, 383, 383, 383, 300, 294, 295, 296, 383, 383, 383, 383, 383],
                [301, 383, 307, 308, 297, 383, 383, 383, 290, 291, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383],
                [383, 300, 309, 310, 296, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 176, 180, 383, 383, 383],
                [383, 383, 309, 310, 308, 383,   2,  18, 383, 383, 293, 292, 383, 383, 290, 174, 184, 188, 383, 383],
                [383, 383, 309, 310, 310, 383, 383, 383, 383, 299, 383, 383, 298, 383, 383, 383, 272, 274, 383, 383],
                [331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331, 331],
                [328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328],
            ]),
        )
        np.testing.assert_allclose(
            _game_area(self.pyboy3),
            np.array([
                [297, 383, 383, 383, 293, 292, 383, 383, 383, 383, 290, 291, 383, 383, 383, 383, 293, 292, 293, 292],
                [296, 383, 383, 299, 383, 383, 298, 383, 383, 383, 383, 383, 383, 383, 383, 299, 383, 383, 383, 383],
                [383, 383, 301, 383, 383, 383, 297, 383,   2,  18, 383, 383, 383, 383, 301, 383, 383, 383, 383, 383],
                [383, 383, 383, 300, 294, 295, 296, 383, 383, 383, 383, 383, 383, 383, 383, 300, 294, 295, 294, 295],
                [293, 292, 383, 383, 383, 383, 383, 383, 330, 331, 331, 332, 383, 383, 293, 292, 383, 383, 383, 383],
                [383, 383, 298, 383, 383, 383, 383, 383, 334, 328, 328, 333, 383, 299, 383, 383, 298, 383, 383, 383],
                [383, 383, 297, 383, 383, 383, 383, 383, 334, 328, 328, 333, 301, 383, 383, 383, 297, 383, 383, 383],
                [294, 295, 296, 383, 383, 383, 383, 299, 334, 328, 328, 333, 383, 300, 294, 295, 296, 383, 383, 383],
                [383, 383, 307, 308, 383, 383, 301, 383, 334, 328, 328, 333, 383, 383, 383, 383, 383, 383, 383, 307],
                [383, 383, 309, 310, 383, 383, 383, 300, 334, 328, 328, 333, 383, 383, 383, 383, 383, 383, 218, 216],
                [383, 383, 309, 310, 308, 383, 383, 383, 334, 328, 328, 333, 272, 274, 383, 383, 383, 383, 307, 308],
                [383, 383, 309, 310, 310, 383, 272, 274, 334, 328, 328, 333, 275, 276, 272, 274, 272, 274, 309, 310],
                [331, 331, 331, 331, 331, 331, 331, 331, 328, 328, 328, 328, 331, 331, 331, 331, 331, 331, 331, 331],
                [328, 328, 277, 278, 277, 278, 277, 278, 277, 278, 277, 278, 277, 278, 277, 278, 277, 278, 277, 278],
                [277, 278, 279, 281, 279, 281, 279, 281, 279, 281, 279, 281, 279, 281, 279, 281, 279, 281, 279, 281],
                [279, 281, 280, 282, 280, 282, 280, 282, 280, 282, 280, 282, 280, 282, 280, 282, 280, 282, 280, 282],
            ]),
        )

if __name__ == "__main__":
    unittest.main()
